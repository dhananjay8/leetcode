If input array is sorted then
 - Binary search
 - Two pointers

If asked for all permutations/subsets then 
 - Backtracking

If given a tree then 
 - DFS
 - BFS

If given a graph then
 - DFS
 - BFS

If given a linked list then 
 - Two pointers

If recursion is banned then
 - Stack

If must solve in-place then
 - Swap corresponding values
 - Store one or more different values in the same pointer

If asked for maximum/minimum subarray/ subset/options then 
 - Dynamic programming

If asked for top/least K items then
 - Heap
 - QuickSelect

If asked for common strings then
 - Map
 - Trie

Else
 - Map/Set for O(1) time & O(n) space
 - Sort input for O(nlogn) time and O(1) space

 1. If you need to optimize for space
Consider bit manipulation techniques or greedy algorithms.

2. If the problem involves strings
Look for patterns like palindromes, anagrams or substrings and consider techniques like rolling hash.


You can predict the solution for a problem by analyzing the constraints.

Curious if you need a greedy approach or a backtracking solution? Trying to decide between an O(n^3) or an O(n log n) approach? Just scroll down the LeetCode question and look at the constraints of the main element.

Wondering if you should use dynamic programming or plain recursion? Should your solution be O(n^2) or O(n)? Simply examine the constraints of the main variable.

Here's a quick guide based on the value of (n):

 - If n <= 12 Time complexity can be O(n!).
 - If n <= 25 Time complexity can be O(2^n).
 - If n <= 100 Time complexity can be O(n^4).
 - If n <= 500 Time complexity can be O(n^3).
 - If n <= 10 ^ 4 Time complexity can be O(n^2).
 - If n <= 10 ^ 6 Time complexity can be O(n log n).
 - If n <= 10 ^ 8 Time complexity can be O(n).
 - If n > 10 ^ 8 Time complexity can be O(log n) or 0(1).
 - If n <= 10 ^ 9 Time complexity can be O(sqrt{n}).
 - If n > 10 ^ 9 Time complexity can be O(log n) or 0(1).